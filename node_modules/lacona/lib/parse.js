'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = parse;
var marked0$0 = [parse, parseElement].map(_regeneratorRuntime.mark);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function parse(_ref) {
  var phrase = _ref.phrase;
  var input = _ref.input;
  var options = _ref.options;
  return _regeneratorRuntime.wrap(function parse$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        return context$1$0.delegateYield(parseElement({ phrase: phrase, input: input, options: options }), 't0', 1);

      case 1:
      case 'end':
        return context$1$0.stop();
    }
  }, marked0$0[0], this);
}

function parseElement(_ref2) {
  var phrase = _ref2.phrase;
  var input = _ref2.input;
  var options = _ref2.options;

  var iterator, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, output, result, getValue, key, child, trueResult, newOutput;

  return _regeneratorRuntime.wrap(function parseElement$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!phrase.__describedPhrase) {
          context$1$0.next = 35;
          break;
        }

        iterator = parse({ phrase: phrase.__describedPhrase, input: input, options: options });
        _iteratorNormalCompletion = true;
        _didIteratorError = false;
        _iteratorError = undefined;
        context$1$0.prev = 5;
        _iterator = _getIterator(iterator);

      case 7:
        if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
          context$1$0.next = 19;
          break;
        }

        output = _step.value;
        result = undefined, getValue = undefined;

        if (phrase.__oldExtensions.length) {
          key = _lodash2['default'].keys(output.result)[0];
          child = undefined;

          if (key === '0') {
            child = phrase;
          } else {
            child = phrase.__describedPhrase.childPhrases[key];
          }
          result = output.result[key];
          if (child && child.getValue) {
            getValue = child.getValue.bind(child);
          }
        } else {
          result = output.result;
          if (phrase.getValue) {
            getValue = phrase.getValue.bind(phrase);
          }
        }

        if (!(!phrase.filter || phrase.filter(result))) {
          context$1$0.next = 16;
          break;
        }

        trueResult = getValue ? getValue(result) : result;
        newOutput = _lodash2['default'].assign({}, output, { result: trueResult });
        context$1$0.next = 16;
        return newOutput;

      case 16:
        _iteratorNormalCompletion = true;
        context$1$0.next = 7;
        break;

      case 19:
        context$1$0.next = 25;
        break;

      case 21:
        context$1$0.prev = 21;
        context$1$0.t0 = context$1$0['catch'](5);
        _didIteratorError = true;
        _iteratorError = context$1$0.t0;

      case 25:
        context$1$0.prev = 25;
        context$1$0.prev = 26;

        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }

      case 28:
        context$1$0.prev = 28;

        if (!_didIteratorError) {
          context$1$0.next = 31;
          break;
        }

        throw _iteratorError;

      case 31:
        return context$1$0.finish(28);

      case 32:
        return context$1$0.finish(25);

      case 33:
        context$1$0.next = 39;
        break;

      case 35:
        if (!phrase._handleParse) {
          context$1$0.next = 39;
          break;
        }

        return context$1$0.delegateYield(phrase._handleParse(input, options, parse), 't1', 37);

      case 37:
        context$1$0.next = 39;
        break;

      case 39:
        //noop

        _lodash2['default'].forEach(phrase.__sources, function (obj) {
          obj.lastVersion = obj.source.__dataVersion;
        });

      case 40:
      case 'end':
        return context$1$0.stop();
    }
  }, marked0$0[1], this, [[5, 21, 25, 33], [26,, 28, 32]]);
}
module.exports = exports['default'];