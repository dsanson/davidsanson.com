'use strict';

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.match = match;
exports.sort = sort;
var marked0$0 = [sort, sortFunction].map(_regeneratorRuntime.mark);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

// returns a `words` object if its a match, else null

function match(input, text) {
  var anywhere = anywhereMatch({ input: input, text: text });
  if (anywhere) return { words: anywhere, score: 0.5 };

  // const fullFuzzy = fuzzyMatch({input, text})
  // if (fullFuzzy) return {words: fullFuzzy, score: 0.25}

  return null;
}

function sort(input, items) {
  var results, itemSet, _arr, _i, _arr$_i, func, score;

  return _regeneratorRuntime.wrap(function sort$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        results = [];
        itemSet = _lodash2['default'].map(items, function (item) {
          return { item: item, matched: false };
        });
        _arr = [[beginningMatch, 1], [anywhereMatch, 0.5] /*, [fuzzyMatch, 0.25]*/];
        _i = 0;

      case 4:
        if (!(_i < _arr.length)) {
          context$1$0.next = 12;
          break;
        }

        _arr$_i = _slicedToArray(_arr[_i], 2);
        func = _arr$_i[0];
        score = _arr$_i[1];
        return context$1$0.delegateYield(sortFunction({ input: input, itemSet: itemSet, func: func, score: score }), 't0', 9);

      case 9:
        _i++;
        context$1$0.next = 4;
        break;

      case 12:
      case 'end':
        return context$1$0.stop();
    }
  }, marked0$0[0], this);
}

function sortFunction(_ref) {
  var input = _ref.input;
  var itemSet = _ref.itemSet;
  var func = _ref.func;
  var score = _ref.score;

  var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _loop, _iterator, _step;

  return _regeneratorRuntime.wrap(function sortFunction$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _iteratorNormalCompletion = true;
        _didIteratorError = false;
        _iteratorError = undefined;
        context$1$0.prev = 3;
        _loop = _regeneratorRuntime.mark(function callee$1$0() {
          var obj, words;
          return _regeneratorRuntime.wrap(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                obj = _step.value;

                if (obj.matched) {
                  context$2$0.next = 8;
                  break;
                }

                words = func({ input: input, text: obj.item.text, qualifier: obj.item.qualifier });

                if (!words) {
                  context$2$0.next = 8;
                  break;
                }

                obj.matched = true;
                _lodash2['default'].forEach(words, function (word) {
                  return word.descriptor = obj.item.descriptor;
                });
                context$2$0.next = 8;
                return { words: words, value: obj.item.value, score: score };

              case 8:
              case 'end':
                return context$2$0.stop();
            }
          }, callee$1$0, _this);
        });
        _iterator = _getIterator(itemSet);

      case 6:
        if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
          context$1$0.next = 11;
          break;
        }

        return context$1$0.delegateYield(_loop(), 't0', 8);

      case 8:
        _iteratorNormalCompletion = true;
        context$1$0.next = 6;
        break;

      case 11:
        context$1$0.next = 17;
        break;

      case 13:
        context$1$0.prev = 13;
        context$1$0.t1 = context$1$0['catch'](3);
        _didIteratorError = true;
        _iteratorError = context$1$0.t1;

      case 17:
        context$1$0.prev = 17;
        context$1$0.prev = 18;

        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }

      case 20:
        context$1$0.prev = 20;

        if (!_didIteratorError) {
          context$1$0.next = 23;
          break;
        }

        throw _iteratorError;

      case 23:
        return context$1$0.finish(20);

      case 24:
        return context$1$0.finish(17);

      case 25:
      case 'end':
        return context$1$0.stop();
    }
  }, marked0$0[1], this, [[3, 13, 17, 25], [18,, 20, 24]]);
}

// escape special characters, and wrap in parens (for matching)
function regexEscape(str) {
  return '(' + str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/, '\\$&') + ')';
}

function regexSplit(str) {
  return str.split('').map(regexEscape);
}

function beginningMatch(_ref2) {
  var input = _ref2.input;
  var text = _ref2.text;
  var qualifier = _ref2.qualifier;

  if (_lodash2['default'].startsWith(text.toLowerCase(), input.toLowerCase())) {
    var matches = [{ text: text.slice(0, input.length), input: true, qualifier: qualifier }];
    if (input.length < text.length) {
      matches.push({ text: text.slice(input.length), input: false, qualifier: qualifier });
    }
    return matches;
  }
  return null;
}

function anywhereMatch(_ref3) {
  var input = _ref3.input;
  var text = _ref3.text;
  var qualifier = _ref3.qualifier;

  var index = text.toLowerCase().indexOf(input.toLowerCase());

  if (index > -1) {
    var matches = [];
    var endIndex = index + input.length;

    if (index > 0) {
      matches.push({ text: text.slice(0, index), input: false, qualifier: qualifier });
    }

    matches.push({ text: text.slice(index, endIndex), input: true, qualifier: qualifier });

    if (endIndex <= text.length - 1) {
      matches.push({ text: text.slice(endIndex), input: false, qualifier: qualifier });
    }

    return matches;
  }
  return null;
}

// function fuzzyMatch({input, text}) {
//   const chars = regexSplit(input)
//   const fuzzyString = chars.reduce((a, b) => (`${a}([^${b}]*)${b}`), '^') + '(.*)$'
//   const fuzzyRegex = new RegExp(fuzzyString, 'i')
//   const fuzzyMatches = text.match(fuzzyRegex)
//
//   if (fuzzyMatches) {
//     const words = []
//     for (let i = 1, l = fuzzyMatches.length; i < l; i++) {
//       if (fuzzyMatches[i].length > 0) {
//         words.push({
//           text: fuzzyMatches[i],
//           input: i % 2 === 0
//         })
//       }
//     }
//     return words
//   }
//   return null
// }