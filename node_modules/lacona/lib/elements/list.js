/** @jsx createElement */
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _fuzzy = require('../fuzzy');

var _laconaPhrase = require('lacona-phrase');

var List = (function (_Phrase) {
  _inherits(List, _Phrase);

  function List() {
    _classCallCheck(this, List);

    _get(Object.getPrototypeOf(List.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(List, [{
    key: 'itemify',
    value: function itemify(item) {
      var trueItem = _lodash2['default'].isString(item) ? { text: item } : item;
      if (!_lodash2['default'].isUndefined(this.props.value)) trueItem.value = this.props.value;
      if (!_lodash2['default'].isUndefined(this.props.qualifier)) trueItem.qualifier = this.props.qualifier;
      return trueItem;
    }
  }, {
    key: 'compute',
    value: _regeneratorRuntime.mark(function compute(input) {
      var trueItems, itemsForFuzzy, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, item, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, result;

      return _regeneratorRuntime.wrap(function compute$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            trueItems = _lodash2['default'].map(this.props.items, this.itemify.bind(this));
            itemsForFuzzy = [];
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            context$2$0.prev = 5;
            _iterator = _getIterator(trueItems);

          case 7:
            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
              context$2$0.next = 18;
              break;
            }

            item = _step.value;

            if (!_lodash2['default'].startsWith(input.toLowerCase(), item.text.toLowerCase())) {
              context$2$0.next = 14;
              break;
            }

            context$2$0.next = 12;
            return {
              remaining: input.slice(item.text.length),
              words: [{ text: item.text, input: true, qualifier: item.qualifier }],
              value: item.value
            };

          case 12:
            context$2$0.next = 15;
            break;

          case 14:
            itemsForFuzzy.push(item);

          case 15:
            _iteratorNormalCompletion = true;
            context$2$0.next = 7;
            break;

          case 18:
            context$2$0.next = 24;
            break;

          case 20:
            context$2$0.prev = 20;
            context$2$0.t0 = context$2$0['catch'](5);
            _didIteratorError = true;
            _iteratorError = context$2$0.t0;

          case 24:
            context$2$0.prev = 24;
            context$2$0.prev = 25;

            if (!_iteratorNormalCompletion && _iterator['return']) {
              _iterator['return']();
            }

          case 27:
            context$2$0.prev = 27;

            if (!_didIteratorError) {
              context$2$0.next = 30;
              break;
            }

            throw _iteratorError;

          case 30:
            return context$2$0.finish(27);

          case 31:
            return context$2$0.finish(24);

          case 32:
            _iteratorNormalCompletion2 = true;
            _didIteratorError2 = false;
            _iteratorError2 = undefined;
            context$2$0.prev = 35;
            _iterator2 = _getIterator((0, _fuzzy.sort)(input, itemsForFuzzy));

          case 37:
            if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
              context$2$0.next = 45;
              break;
            }

            result = _step2.value;

            result.remaining = '';

            context$2$0.next = 42;
            return result;

          case 42:
            _iteratorNormalCompletion2 = true;
            context$2$0.next = 37;
            break;

          case 45:
            context$2$0.next = 51;
            break;

          case 47:
            context$2$0.prev = 47;
            context$2$0.t1 = context$2$0['catch'](35);
            _didIteratorError2 = true;
            _iteratorError2 = context$2$0.t1;

          case 51:
            context$2$0.prev = 51;
            context$2$0.prev = 52;

            if (!_iteratorNormalCompletion2 && _iterator2['return']) {
              _iterator2['return']();
            }

          case 54:
            context$2$0.prev = 54;

            if (!_didIteratorError2) {
              context$2$0.next = 57;
              break;
            }

            throw _iteratorError2;

          case 57:
            return context$2$0.finish(54);

          case 58:
            return context$2$0.finish(51);

          case 59:
          case 'end':
            return context$2$0.stop();
        }
      }, compute, this, [[5, 20, 24, 32], [25,, 27, 31], [35, 47, 51, 59], [52,, 54, 58]]);
    })
  }, {
    key: 'suggest',
    value: _regeneratorRuntime.mark(function suggest(input) {
      var _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, item;

      return _regeneratorRuntime.wrap(function suggest$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _iteratorNormalCompletion3 = true;
            _didIteratorError3 = false;
            _iteratorError3 = undefined;
            context$2$0.prev = 3;
            _iterator3 = _getIterator(this.props.items);

          case 5:
            if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {
              context$2$0.next = 12;
              break;
            }

            item = _step3.value;
            context$2$0.next = 9;
            return this.itemify(item);

          case 9:
            _iteratorNormalCompletion3 = true;
            context$2$0.next = 5;
            break;

          case 12:
            context$2$0.next = 18;
            break;

          case 14:
            context$2$0.prev = 14;
            context$2$0.t0 = context$2$0['catch'](3);
            _didIteratorError3 = true;
            _iteratorError3 = context$2$0.t0;

          case 18:
            context$2$0.prev = 18;
            context$2$0.prev = 19;

            if (!_iteratorNormalCompletion3 && _iterator3['return']) {
              _iterator3['return']();
            }

          case 21:
            context$2$0.prev = 21;

            if (!_didIteratorError3) {
              context$2$0.next = 24;
              break;
            }

            throw _iteratorError3;

          case 24:
            return context$2$0.finish(21);

          case 25:
            return context$2$0.finish(18);

          case 26:
          case 'end':
            return context$2$0.stop();
        }
      }, suggest, this, [[3, 14, 18, 26], [19,, 21, 25]]);
    })
  }, {
    key: 'describe',
    value: function describe() {
      var _this = this;

      if (this.props.fuzzy) {
        return (0, _laconaPhrase.createElement)('value', { compute: this.compute.bind(this), suggest: this.suggest.bind(this), limit: this.props.limit, category: this.props.category });
      } else {
        var literals = _lodash2['default'].chain(this.props.items).map(this.itemify.bind(this)).map(function (item) {
          return (0, _laconaPhrase.createElement)('literal', { text: item.text, value: item.value, qualifier: item.qualifier, category: _this.props.category });
        }).value();

        return (0, _laconaPhrase.createElement)(
          'choice',
          { limit: this.props.limit, value: this.props.value },
          literals
        );
      }
    }
  }]);

  return List;
})(_laconaPhrase.Phrase);

exports['default'] = List;
module.exports = exports['default'];

// first check for exact matches