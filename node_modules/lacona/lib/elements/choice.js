/** @jsx createElement */
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _defineProperty = require('babel-runtime/helpers/define-property')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _laconaPhrase = require('lacona-phrase');

var _parse = require('../parse');

var _parse2 = _interopRequireDefault(_parse);

var _reconcile = require('../reconcile');

var Choice = (function (_Phrase) {
  _inherits(Choice, _Phrase);

  function Choice() {
    _classCallCheck(this, Choice);

    _get(Object.getPrototypeOf(Choice.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(Choice, [{
    key: '_handleParse',
    value: _regeneratorRuntime.mark(function _handleParse(input, options) {
      var successes, scoredOutputs, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, childPhrase, success, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, output, newResult, modifications;

      return _regeneratorRuntime.wrap(function _handleParse$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            successes = 0;
            scoredOutputs = [];

            if (!(this.props.children && this.props.children.length > 0)) {
              context$2$0.next = 62;
              break;
            }

            this.childPhrases = (0, _reconcile.reconcile)({ descriptor: this.props.children, phrase: this.childPhrases, options: options });

            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            context$2$0.prev = 7;
            _iterator = _getIterator(this.childPhrases);

          case 9:
            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
              context$2$0.next = 48;
              break;
            }

            childPhrase = _step.value;
            success = false;
            _iteratorNormalCompletion2 = true;
            _didIteratorError2 = false;
            _iteratorError2 = undefined;
            context$2$0.prev = 15;
            _iterator2 = _getIterator((0, _parse2['default'])({ phrase: childPhrase, input: input, options: options }));

          case 17:
            if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
              context$2$0.next = 27;
              break;
            }

            output = _step2.value;
            newResult = this.props.value || (childPhrase.props.id != null ? _defineProperty({}, childPhrase.props.id, output.result) : output.result);
            modifications = { result: newResult };

            if (this.props.limit) modifications.callbacks = output.callbacks.concat(function () {
              return success = true;
            });

            context$2$0.next = 24;
            return _lodash2['default'].assign({}, output, modifications);

          case 24:
            _iteratorNormalCompletion2 = true;
            context$2$0.next = 17;
            break;

          case 27:
            context$2$0.next = 33;
            break;

          case 29:
            context$2$0.prev = 29;
            context$2$0.t0 = context$2$0['catch'](15);
            _didIteratorError2 = true;
            _iteratorError2 = context$2$0.t0;

          case 33:
            context$2$0.prev = 33;
            context$2$0.prev = 34;

            if (!_iteratorNormalCompletion2 && _iterator2['return']) {
              _iterator2['return']();
            }

          case 36:
            context$2$0.prev = 36;

            if (!_didIteratorError2) {
              context$2$0.next = 39;
              break;
            }

            throw _iteratorError2;

          case 39:
            return context$2$0.finish(36);

          case 40:
            return context$2$0.finish(33);

          case 41:
            if (!this.props.limit) {
              context$2$0.next = 45;
              break;
            }

            if (success) successes++;

            if (!(this.props.limit <= successes)) {
              context$2$0.next = 45;
              break;
            }

            return context$2$0.abrupt('break', 48);

          case 45:
            _iteratorNormalCompletion = true;
            context$2$0.next = 9;
            break;

          case 48:
            context$2$0.next = 54;
            break;

          case 50:
            context$2$0.prev = 50;
            context$2$0.t1 = context$2$0['catch'](7);
            _didIteratorError = true;
            _iteratorError = context$2$0.t1;

          case 54:
            context$2$0.prev = 54;
            context$2$0.prev = 55;

            if (!_iteratorNormalCompletion && _iterator['return']) {
              _iterator['return']();
            }

          case 57:
            context$2$0.prev = 57;

            if (!_didIteratorError) {
              context$2$0.next = 60;
              break;
            }

            throw _iteratorError;

          case 60:
            return context$2$0.finish(57);

          case 61:
            return context$2$0.finish(54);

          case 62:
          case 'end':
            return context$2$0.stop();
        }
      }, _handleParse, this, [[7, 50, 54, 62], [15, 29, 33, 41], [34,, 36, 40], [55,, 57, 61]]);
    })
  }]);

  return Choice;
})(_laconaPhrase.Phrase);

exports['default'] = Choice;
module.exports = exports['default'];