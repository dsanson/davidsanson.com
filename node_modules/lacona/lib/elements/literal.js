/** @jsx createElement */
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _fuzzy = require('../fuzzy');

var _laconaPhrase = require('lacona-phrase');

var Literal = (function (_Phrase) {
  _inherits(Literal, _Phrase);

  function Literal() {
    _classCallCheck(this, Literal);

    _get(Object.getPrototypeOf(Literal.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(Literal, [{
    key: 'suggest',
    value: function suggest() {
      if (this.props.text == null) return [];

      return [{ text: this.props.text.replace(/\n/g, ''), value: this.props.value, score: this.props.score || 1 }];
    }
  }, {
    key: 'compute',
    value: function compute(input) {
      if (this.props.text == null) return [];

      var inputLower = input.toLowerCase();
      var thisTextLine = this.props.text.replace(/\n/g, '');
      var thisTextLower = thisTextLine.toLowerCase();
      if (_lodash2['default'].startsWith(inputLower, thisTextLower)) {
        return [{
          words: [{ text: thisTextLine, input: true }],
          remaining: input.substring(thisTextLine.length),
          value: this.props.value,
          score: this.props.score || 1
        }];
      } else if (_lodash2['default'].startsWith(thisTextLower, inputLower)) {
        var words = [{ text: thisTextLine.substring(0, input.length), input: true }];
        if (thisTextLine.length > input.length) {
          words.push({ text: thisTextLine.substring(input.length), input: false });
        }
        return [{
          words: words,
          remaining: '',
          value: this.props.value,
          score: this.props.score || 1
        }];
      } else if (this.props.fuzzy) {
        var result = (0, _fuzzy.match)(input, thisTextLine);
        if (result) {
          result.remaining = '';
          result.value = this.props.value;
          result.score = this.props.score || result.score;
          return [result];
        }
      }
      return [];
    }
  }, {
    key: 'describe',
    value: function describe() {
      return (0, _laconaPhrase.createElement)('value', {
        compute: this.compute.bind(this),
        suggest: this.suggest.bind(this),
        qualifier: this.props.qualifier,
        category: this.props.category });
    }
  }]);

  return Literal;
})(_laconaPhrase.Phrase);

exports['default'] = Literal;
module.exports = exports['default'];