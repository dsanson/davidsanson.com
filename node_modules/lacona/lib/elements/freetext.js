/** @jsx createElement */
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});
var marked0$0 = [substrings].map(_regeneratorRuntime.mark);

var _laconaPhrase = require('lacona-phrase');

var _smartSplit = require('smart-split');

var _smartSplit2 = _interopRequireDefault(_smartSplit);

function substrings(input, _ref) {
  var splitOn = _ref.splitOn;
  var noSplit = _ref.noSplit;
  var inputs, i;
  return _regeneratorRuntime.wrap(function substrings$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!noSplit) {
          context$1$0.next = 4;
          break;
        }

        context$1$0.next = 3;
        return input;

      case 3:
        return context$1$0.abrupt('return');

      case 4:
        inputs = (0, _smartSplit2['default'])(input, splitOn);
        i = 0;

      case 6:
        if (!(i < inputs.length)) {
          context$1$0.next = 12;
          break;
        }

        context$1$0.next = 9;
        return inputs.slice(0, i + 1).join('');

      case 9:
        i += 2;
        context$1$0.next = 6;
        break;

      case 12:
      case 'end':
        return context$1$0.stop();
    }
  }, marked0$0[0], this);
}

var Freetext = (function (_Phrase) {
  _inherits(Freetext, _Phrase);

  function Freetext() {
    _classCallCheck(this, Freetext);

    _get(Object.getPrototypeOf(Freetext.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(Freetext, [{
    key: 'validate',
    value: _regeneratorRuntime.mark(function validate(input) {
      var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, stringPart;

      return _regeneratorRuntime.wrap(function validate$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            context$2$0.prev = 3;
            _iterator = _getIterator(substrings(input, { splitOn: this.props.splitOn, noSplit: this.props.consumeAll }));

          case 5:
            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
              context$2$0.next = 13;
              break;
            }

            stringPart = _step.value;

            if (!this.props.validate(stringPart)) {
              context$2$0.next = 10;
              break;
            }

            context$2$0.next = 10;
            return {
              words: [{ text: stringPart, input: true }],
              value: stringPart,
              remaining: input.substring(stringPart.length),
              score: this.props.score || 0.1 + 1 / (stringPart.length + 2)
            };

          case 10:
            _iteratorNormalCompletion = true;
            context$2$0.next = 5;
            break;

          case 13:
            context$2$0.next = 19;
            break;

          case 15:
            context$2$0.prev = 15;
            context$2$0.t0 = context$2$0['catch'](3);
            _didIteratorError = true;
            _iteratorError = context$2$0.t0;

          case 19:
            context$2$0.prev = 19;
            context$2$0.prev = 20;

            if (!_iteratorNormalCompletion && _iterator['return']) {
              _iterator['return']();
            }

          case 22:
            context$2$0.prev = 22;

            if (!_didIteratorError) {
              context$2$0.next = 25;
              break;
            }

            throw _iteratorError;

          case 25:
            return context$2$0.finish(22);

          case 26:
            return context$2$0.finish(19);

          case 27:
          case 'end':
            return context$2$0.stop();
        }
      }, validate, this, [[3, 15, 19, 27], [20,, 22, 26]]);
    })
  }, {
    key: 'describe',
    value: function describe() {
      return (0, _laconaPhrase.createElement)('value', { compute: this.validate.bind(this), limit: this.props.limit });
    }
  }]);

  return Freetext;
})(_laconaPhrase.Phrase);

exports['default'] = Freetext;

Freetext.defaultProps = {
  validate: function validate() {
    return true;
  },
  splitOn: '',
  consumeAll: false
};
module.exports = exports['default'];