/** @jsx createElement */
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _laconaPhrase = require('lacona-phrase');

var _parse = require('../parse');

var _parse2 = _interopRequireDefault(_parse);

var _reconcile = require('../reconcile');

var _stackfind = require('../stackfind');

var _stackfind2 = _interopRequireDefault(_stackfind);

var Descriptor = (function (_Phrase) {
  _inherits(Descriptor, _Phrase);

  function Descriptor() {
    _classCallCheck(this, Descriptor);

    _get(Object.getPrototypeOf(Descriptor.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(Descriptor, [{
    key: 'parseChild',
    value: _regeneratorRuntime.mark(function parseChild(input, options) {
      var showPlaceholder, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, output;

      return _regeneratorRuntime.wrap(function parseChild$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (this.props.trigger) this.props.trigger(input.text);

            if (!(this.props.showForEmpty && input.text === '')) {
              context$2$0.next = 3;
              break;
            }

            return context$2$0.abrupt('return', true);

          case 3:
            showPlaceholder = true;
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            context$2$0.prev = 7;
            _iterator = _getIterator((0, _parse2['default'])({ phrase: this.childPhrase, input: input, options: options }));

          case 9:
            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
              context$2$0.next = 22;
              break;
            }

            output = _step.value;

            showPlaceholder = false;

            if (!this.props.argument) {
              context$2$0.next = 17;
              break;
            }

            context$2$0.next = 15;
            return _lodash2['default'].assign({}, output, { currentArgument: undefined });

          case 15:
            context$2$0.next = 19;
            break;

          case 17:
            context$2$0.next = 19;
            return output;

          case 19:
            _iteratorNormalCompletion = true;
            context$2$0.next = 9;
            break;

          case 22:
            context$2$0.next = 28;
            break;

          case 24:
            context$2$0.prev = 24;
            context$2$0.t0 = context$2$0['catch'](7);
            _didIteratorError = true;
            _iteratorError = context$2$0.t0;

          case 28:
            context$2$0.prev = 28;
            context$2$0.prev = 29;

            if (!_iteratorNormalCompletion && _iterator['return']) {
              _iterator['return']();
            }

          case 31:
            context$2$0.prev = 31;

            if (!_didIteratorError) {
              context$2$0.next = 34;
              break;
            }

            throw _iteratorError;

          case 34:
            return context$2$0.finish(31);

          case 35:
            return context$2$0.finish(28);

          case 36:
            if (showPlaceholder) {
              context$2$0.next = 38;
              break;
            }

            return context$2$0.abrupt('return', false);

          case 38:
            if (!(this.props.displayWhen && this.props.displayWhen(input.text))) {
              context$2$0.next = 40;
              break;
            }

            return context$2$0.abrupt('return', true);

          case 40:
            return context$2$0.abrupt('return', false);

          case 41:
          case 'end':
            return context$2$0.stop();
        }
      }, parseChild, this, [[7, 24, 28, 36], [29,, 31, 35]]);
    })
  }, {
    key: 'yieldSelf',
    value: _regeneratorRuntime.mark(function yieldSelf(input, options) {
      var word, modification;
      return _regeneratorRuntime.wrap(function yieldSelf$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            word = {
              text: this.props.text,
              input: false,
              placeholder: true,
              argument: input.currentArgument
            };
            modification = {
              score: 0.01,
              result: undefined,
              text: ''
            };

            modification.words = input.words.concat(word);

            // if (_.isEmpty(input.suggestion)) {
            //   modification.suggestion = input.suggestion.concat(word)
            // } else {
            //   modification.completion = input.completion.concat(word)
            // }

            context$2$0.next = 5;
            return _lodash2['default'].assign({}, input, modification);

          case 5:
          case 'end':
            return context$2$0.stop();
        }
      }, yieldSelf, this);
    })
  }, {
    key: '_handleParse',
    value: _regeneratorRuntime.mark(function _handleParse(input, options) {
      var inputWithArgument, showPlaceholder;
      return _regeneratorRuntime.wrap(function _handleParse$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            this.childPhrase = (0, _reconcile.reconcile)({ descriptor: this.props.children[0], phrase: this.childPhrase, options: options });

            inputWithArgument = input;

            if (this.props.argument && !input.currentArgument) {
              inputWithArgument = _lodash2['default'].assign({}, input, { currentArgument: this.props.text });
            }

            if (!this.props.placeholder) {
              context$2$0.next = 14;
              break;
            }

            if (!(input.text !== '' || _lodash2['default'].all(input.words, 'input'))) {
              context$2$0.next = 11;
              break;
            }

            return context$2$0.delegateYield(this.parseChild(inputWithArgument, options), 't0', 6);

          case 6:
            showPlaceholder = context$2$0.t0;

            if (!showPlaceholder) {
              context$2$0.next = 9;
              break;
            }

            return context$2$0.delegateYield(this.yieldSelf(input, options), 't1', 9);

          case 9:
            context$2$0.next = 12;
            break;

          case 11:
            return context$2$0.delegateYield(this.yieldSelf(input, options), 't2', 12);

          case 12:
            context$2$0.next = 15;
            break;

          case 14:
            return context$2$0.delegateYield(this.parseChild(inputWithArgument, options), 't3', 15);

          case 15:
          case 'end':
            return context$2$0.stop();
        }
      }, _handleParse, this);
    })
  }]);

  return Descriptor;
})(_laconaPhrase.Phrase);

exports['default'] = Descriptor;

Descriptor.defaultProps = {
  placeholder: false,
  argument: false,
  showForEmpty: false,
  displayWhen: function displayWhen(input) {
    return input === '';
  }
};
module.exports = exports['default'];