'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _Number$MAX_SAFE_INTEGER = require('babel-runtime/core-js/number/max-safe-integer')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _laconaPhrase = require('lacona-phrase');

var _parse = require('../parse');

var _parse2 = _interopRequireDefault(_parse);

var _reconcile = require('../reconcile');

var Repeat = (function (_Phrase) {
  _inherits(Repeat, _Phrase);

  function Repeat() {
    _classCallCheck(this, Repeat);

    _get(Object.getPrototypeOf(Repeat.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(Repeat, [{
    key: '_handleParse',
    value: _regeneratorRuntime.mark(function _handleParse(input, options) {
      var modifications;
      return _regeneratorRuntime.wrap(function _handleParse$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            this.child = (0, _reconcile.reconcile)({ descriptor: this.props.children[0], phrase: this.child, options: options });
            this.separator = this.props.separator ? (0, _reconcile.reconcile)({ descriptor: this.props.separator, phrase: this.separator, options: options }) : null;

            modifications = {
              result: [],
              score: 1
            };
            return context$2$0.delegateYield(this.parseChild(0, _lodash2['default'].assign({}, input, modifications), options), 't0', 4);

          case 4:
          case 'end':
            return context$2$0.stop();
        }
      }, _handleParse, this);
    })
  }, {
    key: 'parseChild',
    value: _regeneratorRuntime.mark(function parseChild(childIndex, input, options) {
      var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, sepOutput, trueOutput;

      return _regeneratorRuntime.wrap(function parseChild$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!(childIndex > this.props.max)) {
              context$2$0.next = 2;
              break;
            }

            return context$2$0.abrupt('return');

          case 2:
            if (!(childIndex >= this.props.min)) {
              context$2$0.next = 5;
              break;
            }

            context$2$0.next = 5;
            return input;

          case 5:
            if (!_lodash2['default'].some(input.words, 'placeholder')) {
              context$2$0.next = 7;
              break;
            }

            return context$2$0.abrupt('return');

          case 7:
            if (!(childIndex > 0 && this.separator)) {
              context$2$0.next = 36;
              break;
            }

            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            context$2$0.prev = 11;
            _iterator = _getIterator((0, _parse2['default'])({ phrase: this.separator, input: input, options: options }));

          case 13:
            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
              context$2$0.next = 20;
              break;
            }

            sepOutput = _step.value;
            trueOutput = _lodash2['default'].assign({}, sepOutput, { result: input.result });
            return context$2$0.delegateYield(this.callParseChild(childIndex, trueOutput, options), 't0', 17);

          case 17:
            _iteratorNormalCompletion = true;
            context$2$0.next = 13;
            break;

          case 20:
            context$2$0.next = 26;
            break;

          case 22:
            context$2$0.prev = 22;
            context$2$0.t1 = context$2$0['catch'](11);
            _didIteratorError = true;
            _iteratorError = context$2$0.t1;

          case 26:
            context$2$0.prev = 26;
            context$2$0.prev = 27;

            if (!_iteratorNormalCompletion && _iterator['return']) {
              _iterator['return']();
            }

          case 29:
            context$2$0.prev = 29;

            if (!_didIteratorError) {
              context$2$0.next = 32;
              break;
            }

            throw _iteratorError;

          case 32:
            return context$2$0.finish(29);

          case 33:
            return context$2$0.finish(26);

          case 34:
            context$2$0.next = 37;
            break;

          case 36:
            return context$2$0.delegateYield(this.callParseChild(childIndex, input, options), 't2', 37);

          case 37:
          case 'end':
            return context$2$0.stop();
        }
      }, parseChild, this, [[11, 22, 26, 34], [27,, 29, 33]]);
    })
  }, {
    key: 'callParseChild',
    value: _regeneratorRuntime.mark(function callParseChild(childIndex, input, options) {
      var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, output, trueInput;

      return _regeneratorRuntime.wrap(function callParseChild$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _iteratorNormalCompletion2 = true;
            _didIteratorError2 = false;
            _iteratorError2 = undefined;
            context$2$0.prev = 3;
            _iterator2 = _getIterator((0, _parse2['default'])({ phrase: this.child, input: input, options: options }));

          case 5:
            if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
              context$2$0.next = 14;
              break;
            }

            output = _step2.value;

            if (!(this.props.unique && _lodash2['default'].some(input.result, _lodash2['default'].partial(_lodash2['default'].isEqual, _lodash2['default'], output.result)))) {
              context$2$0.next = 9;
              break;
            }

            return context$2$0.abrupt('return');

          case 9:
            trueInput = _lodash2['default'].assign({}, output, { result: input.result.concat(output.result) });
            return context$2$0.delegateYield(this.parseChild(childIndex + 1, trueInput, options), 't0', 11);

          case 11:
            _iteratorNormalCompletion2 = true;
            context$2$0.next = 5;
            break;

          case 14:
            context$2$0.next = 20;
            break;

          case 16:
            context$2$0.prev = 16;
            context$2$0.t1 = context$2$0['catch'](3);
            _didIteratorError2 = true;
            _iteratorError2 = context$2$0.t1;

          case 20:
            context$2$0.prev = 20;
            context$2$0.prev = 21;

            if (!_iteratorNormalCompletion2 && _iterator2['return']) {
              _iterator2['return']();
            }

          case 23:
            context$2$0.prev = 23;

            if (!_didIteratorError2) {
              context$2$0.next = 26;
              break;
            }

            throw _iteratorError2;

          case 26:
            return context$2$0.finish(23);

          case 27:
            return context$2$0.finish(20);

          case 28:
          case 'end':
            return context$2$0.stop();
        }
      }, callParseChild, this, [[3, 16, 20, 28], [21,, 23, 27]]);
    })
  }]);

  return Repeat;
})(_laconaPhrase.Phrase);

exports['default'] = Repeat;

Repeat.defaultProps = {
  max: _Number$MAX_SAFE_INTEGER,
  min: 1,
  unique: false
};
module.exports = exports['default'];