"use strict";

var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

exports.createElement = createElement;
exports.createFactory = createFactory;
exports.createPhrase = createPhrase;
Object.defineProperty(exports, "__esModule", {
  value: true
});

var inherits = _interopRequire(require("inherits"));

var version = require("../package").version;

function createElement(Constructor, props) {
  for (var _len = arguments.length, children = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    children[_key - 2] = arguments[_key];
  }

  return {
    Constructor: Constructor,
    props: props,
    children: children,
    version: version
  };
}

function createFactory(constructor) {
  return createElement.bind(null, constructor);
}

var Phrase = exports.Phrase = function Phrase() {
  _classCallCheck(this, Phrase);
};

var Source = exports.Source = function Source() {
  _classCallCheck(this, Source);
};

function createPhrase(options) {
  var Constructor = function Constructor() {};

  inherits(Constructor, Phrase);

  Constructor.translations = options.translations;
  Constructor.extensions = options.extensions;
  Constructor.defaultProps = options.defaultProps;
  Constructor.sources = options.sources;

  for (var key in options) {
    if (typeof options[key] === "function") {
      Constructor.prototype[key] = options[key];
    }
  }
  return Constructor;
}

var choice = createFactory("choice");
exports.choice = choice;
var content = createFactory("content");
exports.content = content;
var literal = createFactory("literal");
exports.literal = literal;
var separator = createFactory("separator");
exports.separator = separator;
var sequence = createFactory("sequence");
exports.sequence = sequence;
var value = createFactory("value");
exports.value = value;